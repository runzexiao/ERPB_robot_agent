Ability_list:
  - 'Build drainage pipe'

knowledge_of_decomposition : |
    All tasks to be published should adhere to the following JSON format:
    '''json
    {
    "Task type": string // The type of task to be published. This type should be chosen from one of the following: preliminary task, collaborative task, subsequent task, independent task, or incremental task.
    "Content": string // The specific content of the task to be published. Please use the original text of the task content.
    "Priority": int // if (the type of task to be published is a preliminary task) then [fill in %d], 
    elseif (the type of task to be published is a collaborative task, independent task, or incremental task) then [fill in %d], 
    elseif (the type of task to be published is a subsequent task) then [fill in %d].
    }'''
    """ % (overall_task_dict["Priority"] + 1, overall_task_dict["Priority"], overall_task_dict["Priority"] - 1)

Build_drainage_pipe:
  content: 'Build drainage pipe'
  efficiency: 0.4
  knowledge_template: |
    There is no need for {my_id} to publish any task here.
  knowledge_needed_input: |
    '''json
    {
      my_id: string; // My robot ID.
    }'''
  my_function_description: | 
    [
        {{
            "function_name": "nav_2(robot_id, position)",
            "function_description": "Move the robot to a destination position.",
            "input_parameter_description": {{
                "robot_id": "The id of the robot to be moved.",
                "position": "The coordinates of the robot's destination, usually in the form of a 2D array like [x, y]."
            }}
        }},
        {{
            "function_name": "call_cop_func(cop_id, function, input)",
            "function_description": "Send a function call request to a collaborative robot with id cop_id, where the function name is function, and the input is input.",
            "input_parameter_description": {{
                "cop_id": "The id of the collaborative robot receiving the function call request.",
                "function": "The name of the requested function.",
                "input": "An array like [a, b] consisting of the inputs required by the requested function."
            }}
        }},
        {{
            "function_name": "lay_pipe()",
            "function_description": "lay the pipe to the ground",
            "input_parameter_description": {{"None"
            }}
        }}
    ]
  execute_needed_input: |
    '''{
      my_id: string; // My robot ID.
      planned starting point for the pipe: string; // Please fill in the coordinates or representative letter of planned starting point for the pipe. If neither is explicitly specified, this item should be filled in as unknown.
      planned endpoint for the pipe: string; // Please fill in the coordinates or representative letter of the planned endpoint for the pipe. If neither is explicitly specified, this item should be filled in as unknown.
    }'''

  execute_input_variable_list: |
    []

  execute_process: |
    """My task execution steps:
    Step 1: {my_id} moves to {planned starting point for the pipe}.
    Step 2: {my_id} moves to {planned endpoint for the pipe}.
    Step 3: {my_id} lays the pipe to the ground.
    """

  my_function_defination: |
    def nav_2(self, robot_id, position):
        topic_name = f'/{robot_id}/goal_pose'
        publisher = self.create_publisher(PoseStamped, topic_name, 10)
        goal_pose = PoseStamped()
        goal_pose.header.frame_id = 'map'
        goal_pose.pose.position.x = float(position[0])  # 目标位置X坐标
        goal_pose.pose.position.y = float(position[1])  # 目标位置Y坐标

        # 计算目标与当前位置的初始距离
        def update_distance():
            return math.sqrt(
                (goal_pose.pose.position.x - self.current_position[0])**2 +
                (goal_pose.pose.position.y - self.current_position[1])**2
            )

        # 用于同步的事件
        goal_reached_event = Event()

        # 定时器回调函数，用于发布消息和检查距离
        def timer_callback():
            distance = update_distance()
            if distance > 5:
                goal_pose.header.stamp = self.get_clock().now().to_msg()  # 更新时间戳
                publisher.publish(goal_pose)
                self.get_logger().info(f'Distance: {distance}')
            else:
                self.get_logger().info('Goal reached or close enough.')
                timer.cancel()  # 停止定时器
                goal_reached_event.set()  # 触发事件，解除阻塞

        # 创建定时器1秒执行一次
        timer = self.create_timer(1.0, timer_callback)

        # 阻塞当前线程等待目标距离小于5
        goal_reached_event.wait()

  
    def call_cop_func(self, robot_id, function_name, args):
        client = self.create_client(StringToBool, f'/{robot_id}/instruction_listener_service', callback_group=self.callback_group)
        req = StringToBool.Request()
        req.data = json.dumps({
            'function name': function_name,
            'function input': args
        })
        self.get_logger().info(f'Calling function {function_name} on {robot_id} with args {args}')
        # future = client.call_async(req)
        # rclpy.spin_until_future_complete(self, future)  # 阻塞直到获取响应
        future = client.call(req)
        if future is not None:
            respond = future
            self.get_logger().info(f'XXTT Received response: {respond}')
        else:
            self.get_logger().error(f'XXEE Service call failed: {future}')
        client.destroy()  # 在使用完成后销毁客户端

    def lay_pipe(self):
        pass


  my_function_name: |
    ['nav_2', 'call_cop_func', 'lay_pipe']




