Ability_list:
  - 'Connect the water pump to the drainage pipe'
  - 'Load or unload items such as piles and pumps'

knowledge_of_decomposition : |
    All tasks to be published should adhere to the following JSON format:
    '''json
    {
    "Task type": string // The type of task to be published. This type should be chosen from one of the following: preliminary task, collaborative task, subsequent task, independent task, or incremental task.
    "Content": string // The specific content of the task to be published. Please use the original text of the task content.
    "Priority": int // if (the type of task to be published is a preliminary task) then [fill in %d], 
    elseif (the type of task to be published is a collaborative task, independent task, or incremental task) then [fill in %d], 
    elseif (the type of task to be published is a subsequent task) then [fill in %d].
    }'''
    """ % (overall_task_dict["Priority"] + 1, overall_task_dict["Priority"], overall_task_dict["Priority"] - 1)

Connect_the_water_pump_to_the_drainage_pipe:
  content: 'Connect the water pump to the drainage pipe'
  efficiency: 0.4
  knowledge_template: |
    if (there is no passable path from the point {Current location of me} to the point {Connection location of the water pump and pipe})
    then [
      if ({Ground state} == hard)
        then [publish preliminary task: Clear a passable path from point {Current location of me} to the point {Connection location of the water pump and pipe}.]
      elseif ({Ground state} == soft)
        then [publish preliminary task: Lay down a working path to create a specialized working path from point {Current location of me} to the point {Connection location of the water pump and pipe}.]
    ]
    if (the water pump is not at point {Connection location of the water pump and pipe})
    then [
      publish preliminary task: Transport the water pump from point {Current location of the water pump} to the point {Connection location of the water pump and pipe}.
    ]
    if (the pipe status of pipe which is from point {Pipe construction starting point} to the point {Pipe construction endpoint} is not laid)
    then [
      publish preliminary task: Build drainage pipe from point {Pipe construction starting point} to the point {Pipe construction endpoint}.
    ]
  knowledge_needed_input: |
    '''json
    {
      "Connection location of the water pump and pipe": string // Please fill in the coordinates or representative letter of the water pump installation location. If neither is explicitly specified, this item should be filled in as unknown.
      "Current location of the water pump": string // Please fill in the current coordinates or representative letter of the water pump. If neither is explicitly specified, this item should be filled in as unknown.
      "Current location of me": string // Please fill in the coordinates or representative letter of my current location. If neither is explicitly specified, this item should be filled in as unknown.
      "Ground state": string // If the ground is soft, fill in soft. If the ground is hard, fill in hard. If neither is explicitly specified, this item should be filled in as unknown.
      "Pipe construction starting point": string // Please fill in the coordinates or representative letter of the starting point of the pipe construction. If neither is explicitly specified, this item should be filled in as unknown.
      "Pipe construction endpoint": string // Please fill in the coordinates or representative letter of the endpoint of the pipe construction. If neither is explicitly specified, this item should be filled in as unknown.
    }'''
  my_function_description: | 
    [
        {{
            "function_name": "nav_2(robot_id, position)",
            "function_description": "Move the robot to a destination position.",
            "input_parameter_description": {{
                "robot_id": "The id of the robot to be moved.",
                "position": "The coordinates of the robot's destination, usually in the form of a 2D array like [x, y]."
            }}
        }},
        {{
            "function_name": "call_cop_func(cop_id, function, input)",
            "function_description": "Send a function call request to a collaborative robot with id cop_id, where the function name is function, and the input is input.",
            "input_parameter_description": {{
                "cop_id": "The id of the collaborative robot receiving the function call request.",
                "function": "The name of the requested function.",
                "input": "An array like [a, b] consisting of the inputs required by the requested function."
            }}
        }},
        {{
            "function_name": "connect_2_pump_and_pipe()",
            "function_description": "Connect the water pump to the pipe.",
            "input_parameter_description": {{"None"
            }}
        }}
    ]
  execute_needed_input: |
    '''{
      my_id: string; // My robot ID.
      Connection location of the water pump and pipe: string; // Please fill in the coordinates or representative letter of connection location of the water pump and pipe. If neither is explicitly specified, this item should be filled in as unknown.
    }'''

  execute_input_variable_list: |
    []

  execute_process: |
    """My task execution steps:
    Step 1: {my_id} moves to {Connection location of the water pump and pipe}.
    Step 2: Connect the water pump to the pipe."""

  my_function_defination: |
    def nav_2(self, robot_id, position):
        topic_name = f'/{robot_id}/goal_pose'
        publisher = self.create_publisher(PoseStamped, topic_name, 10)
        goal_pose = PoseStamped()
        goal_pose.header.frame_id = 'map'
        goal_pose.header.stamp = self.get_clock().now().to_msg()
        goal_pose.pose.position.x = position[0]  # 目标位置X坐标
        goal_pose.pose.position.y = position[1]  # 目标位置Y坐标
        distance = math.sqrt((goal_pose.pose.position.x - self.current_position[0])**2 + (goal_pose.pose.position.y - self.current_position[1])**2)
        while distance > 3:
            rclpy.spin_once(self, timeout_sec=0.1)  # 确保其他回调函数可以被调用
            distance = math.sqrt((goal_pose.pose.position.x - self.current_position[0])**2 + (goal_pose.pose.position.y - self.current_position[1])**2)
            publisher.publish(goal_pose)
            self.get_logger().info(f'Published goal pose to {topic_name}: {goal_pose}')
            time.sleep(1)
       
    def call_cop_func(self, robot_id, function_name, args):
        client = self.create_client(StringToBool, f'{robot_id}/instruction_listener_service', callback_group=self.callback_group)
        req = StringToBool.Request()
        req.data = json.dumps({
            'function name': function_name,
            'function input': args
        })
        self.get_logger().info(f'Calling function {function_name} on {robot_id} with args {args}')
        client.call_async(req)

    def connect_2_pump_and_pipe(self):
        pass


  my_function_name: |
    ['nav_2', 'call_cop_func', 'connect_2_pump_and_pipe']



Load_or_unload_items_such_as_piles_and_pumps:
  content: 'Load or unload items such as piles and pumps'
  efficiency: 0.3
  knowledge: |
    if (there is no passable path from the point {Current location of me} to the point {Location for loading/unloading items})
    then [
      if ({Ground state} == hard)
        then [publish preliminary task: Clear a passable path from point {Current location of me} to the point {Location for loading/unloading items}.]
      elseif ({Ground state} == soft)
        then [publish preliminary task: Lay down a working path to create a specialized working path from point {Current location of me} to the point {Location for loading/unloading items}.]
    ]
    if (the water pump is not at point {Connection location of the water pump and pipe})
    then [
      publish preliminary task: Transport the water pump from point {Current location of the water pump} to the point {Connection location of the water pump and pipe}.
    ]
  knowledge_needed_input: |
    '''json
    {
      "Location for loading or unloading work": string // Please fill in the coordinates or representative letter of the location for loading or unloading work. If neither is explicitly specified, this item should be filled in as unknown.
      "Current location of the item to be loaded or unloaded": string // Please fill in the current coordinates or representative letter of the current location of the item to be loaded or unloaded. If neither is explicitly specified, this item should be filled in as unknown.
      "Current location of me": string // Please fill in the coordinates or representative letter of my current location. If neither is explicitly specified, this item should be filled in as unknown.
      "Ground state": string // If the ground is soft, fill in soft. If the ground is hard, fill in hard. If neither is explicitly specified, this item should be filled in as unknown.
      ""
    }'''
  my_function_description: | 
    [
        {{
            "function_name": "nav_2(robot_id, position)",
            "function_description": "Move the robot to a destination position.",
            "input_parameter_description": {{
                "robot_id": "The id of the robot to be moved.",
                "position": "The coordinates of the robot's destination, usually in the form of a 2D array like [x, y]."
            }}
        }},
        {{
            "function_name": "call_cop_func(cop_id, function, input)",
            "function_description": "Send a function call request to a collaborative robot with id cop_id, where the function name is function, and the input is input.",
            "input_parameter_description": {{
                "cop_id": "The id of the collaborative robot receiving the function call request.",
                "function": "The name of the requested function.",
                "input": "An array like [a, b] consisting of the inputs required by the requested function."
            }}
        }},
        {{
            "function_name": "load_items(robot_id, items)",
            "function_description": "Load the items into the transport vehicle.",
            "input_parameter_description": {{
                "robot_id": "The id of the robot to load the items into.",
                "items": "The name of the item to be loaded."
            }},
        {{
            "function_name": "unload_items(robot_id, items)",
            "function_description": "Unload the items into the transport vehicle.",
            "input_parameter_description": {{
                "robot_id": "The id of the robot to unload the items into.",
                "items": "The name of the item to be unloaded."
            }}  
        }}
    ]
  execute_needed_input: |
    '''{
      my_id: string; // My robot ID.
      Location for loading or unloading work: string; // Please fill in the coordinates or representative letter of the location for loading or unloading work. If neither is explicitly specified, this item should be filled in as unknown.
      Item to be loaded or unloaded: string; // Please fill in the name of the item to be loaded or unloaded. If neither is explicitly specified, this item should be filled in as unknown.
    }'''

  execute_input_variable_list: |
    []

  execute_process: |
    """My task execution steps:
    Step 1: {my_id} moves to {Location for loading or unloading work}.
    Step 2: {my_id} load or unload the {Item to be loaded or unloaded}."""

  my_function_defination: |
    def nav_2(self, robot_id, position):
        topic_name = f'/{robot_id}/goal_pose'
        publisher = self.create_publisher(PoseStamped, topic_name, 10)
        goal_pose = PoseStamped()
        goal_pose.header.frame_id = 'map'
        goal_pose.header.stamp = self.get_clock().now().to_msg()
        goal_pose.pose.position.x = position[0]  # 目标位置X坐标
        goal_pose.pose.position.y = position[1]  # 目标位置Y坐标
        distance = math.sqrt((goal_pose.pose.position.x - self.current_position[0])**2 + (goal_pose.pose.position.y - self.current_position[1])**2)
        while distance > 3:
            rclpy.spin_once(self, timeout_sec=0.1)  # 确保其他回调函数可以被调用
            distance = math.sqrt((goal_pose.pose.position.x - self.current_position[0])**2 + (goal_pose.pose.position.y - self.current_position[1])**2)
            publisher.publish(goal_pose)
            self.get_logger().info(f'Published goal pose to {topic_name}: {goal_pose}')
            time.sleep(1)
       
    def call_cop_func(self, robot_id, function_name, args):
        client = self.create_client(StringToBool, f'{robot_id}/instruction_listener_service', callback_group=self.callback_group)
        req = StringToBool.Request()
        req.data = json.dumps({
            'function name': function_name,
            'function input': args
        })
        self.get_logger().info(f'Calling function {function_name} on {robot_id} with args {args}')
        client.call_async(req)

    def load_items(robot_id, items):
        pass

    def unload_items(robot_id, items):
        pass


  my_function_name: |
    ['nav_2', 'call_cop_func', 'load_items', 'unload_items']
